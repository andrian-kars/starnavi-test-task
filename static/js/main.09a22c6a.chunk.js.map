{"version":3,"sources":["Components/ModesForm.jsx","Components/Content.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ModesForm","memo","modes","setSize","setHovered","className","enableReinitialize","initialValues","mode","onSubmit","values","setSubmitting","isSubmitting","as","name","map","el","value","key","type","disabled","Content","modesArrayed","Object","keys","field","useState","hovered","size","onHover","e","item","currentTarget","parentElement","id","includes","filter","style","backgroundColor","fieldElemets","fieldRows","i","push","onMouseEnter","split","App","setModes","useEffect","axios","get","then","res","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09a22c6a.chunk.js","sourcesContent":["import { Field, Form, Formik } from \"formik\"\nimport { memo } from \"react\"\n\nexport const ModesForm = memo(({ modes, setSize, setHovered }) => {\n    const submit = (values, { setSubmitting }) => {\n        // Reseting\n        setSize(0)\n        setHovered([])\n        setSize(+values.modes)\n        setSubmitting(false)\n    }\n\n    return <div className={'form'}>\n        <Formik\n            enableReinitialize\n            initialValues={{ modes: modes[0].mode }}\n            onSubmit={submit}\n        >\n            {({ isSubmitting }) => (\n                <Form>\n                    <Field as=\"select\" name=\"modes\">\n                        {modes.map(el => <option key={el.key} value={el.mode}>{el.key}</option>)}\n                    </Field>\n                    <button className={'button'} type=\"submit\" disabled={isSubmitting}>Start</button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})","import { memo, useState } from \"react\";\nimport { ModesForm } from \"./ModesForm\";\n\nexport const Content = memo(({ modes }) => {\n    // making it easier to access\n    const modesArrayed = Object.keys(modes).map((key) => {\n        return { mode: modes[key].field, key: key}\n    })\n    \n    const [hovered, setHovered] = useState([])\n    const [size, setSize] = useState(modesArrayed[0].mode)\n\n    const onHover = e => {\n        const item = `${e.currentTarget.parentElement.id},${e.currentTarget.id}`\n        if (hovered.includes(item)) {\n            setHovered(hovered.filter(el => el !== item))\n            e.currentTarget.style.backgroundColor = \"#fff\";\n        } else {\n            setHovered([...hovered, item])\n            e.currentTarget.style.backgroundColor = \"#00a9ef\";\n        }\n    }\n\n    const fieldElemets = []\n    const fieldRows = []\n\n    for (let i = 1; i <= size; i++) {\n        fieldElemets.push(<div onMouseEnter={(e) => onHover(e)} key={i} id={i} className={'item'}>{i}</div>)\n    }\n    \n    for (let i = 1; i <= size; i++) {\n        // const updatedKeys = [...fieldElemets,]\n        fieldRows.push(<div key={i} id={i} className={'row'}>\n            {fieldElemets}\n        </div>)\n    }\n\n    return <div className={'field'}>\n        <div className={'grid'}>\n            <ModesForm modes={modesArrayed} setSize={setSize} setHovered={setHovered} />\n            <div className={'gridWhrapper'}>\n                {fieldRows}\n            </div>\n        </div>\n        <div className={'infos'}>\n            <h3>Hover squares</h3>\n            {hovered.map(el => <p className={'info'} key={el}>row {el.split(',')[0]} col {el.split(',')[1]}</p>)}\n        </div>\n    </div>\n})","import axios from 'axios';\nimport { useState, useEffect, memo } from 'react';\nimport './App.css'\nimport { Content } from './Components/Content';\n\n// Geting Data\nconst fetchModesData = () => {\n  return axios.get('https://demo1030918.mockable.io/').then(res => res.data)\n}\n\nconst App = memo(() => {\n  // Setting Data\n  const [modes, setModes] = useState(null)\n\n  useEffect(() => {\n    fetchModesData().then(modes => {\n      setModes(modes)\n    })\n  }, [])\n\n  // Wating till it comes\n  if (modes === null) {\n    return <p>Loading...</p>\n  }\n\n  return <div className=\"app\">\n    <Content modes={modes} />\n  </div>\n})\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}